build an image called getting-started, the . indicates use all files
docker build -t getting-started .

run the application/image in a container, -d indicates run in the background, -p exposes the containers port 3000 to host port 3000
docker run -dp 3000:3000 getting-started

show running containers, -a is show all containers regardless of running or not
docker ps

push a new tag to a repositiroy on docker hub
docker push docker/getting-started:tagname

stop a container
docker stop <container-id>

remove a container
docker rm <container-id>

stop / remove
docker rm -f <id>

login to docker hub
docker login -u gquathamer //enter password

give an image a new name
docker tag getting-started gquathamer/getting-started

build an image for an amd64 platform, use the --platform tag
docker build --platform linux/amd64 -t YOUR-USER-NAME/getting-started .

another example of a run command, requesting an image and executing it in a container
docker run -dp 3000:3000 YOUR-USER-NAME/getting-started

Start an ubuntu container that will create a file named /data.txt with a random number between 1 and 10000.
docker run -d ubuntu bash -c "shuf -i 1-10000 -n 1 -o /data.txt && tail -f /dev/null"


docker run -it ubuntu ls /

create a volume, persists data
docker volume create todo-db

Start the todo app container, but add the --mount option to specify a volume mount.
Give the volume a name, and mount it to /etc/todos in the container, which captures all files created at the path.
docker run -dp 3000:3000 --mount type=volume,src=todo-db,target=/etc/todos getting-started
  had some trouble with this command, this is what got it working for a bash termianl, otherwise it works with a powershell terminal
  docker run -dp 3000:3000 -v todo-app:/etc/todos getting-started

start bash in an ubuntu container
docker run -it --mount type=bind,src="$(pwd)",target=/src ubuntu bash

powershell command
docker run -dp 3000:3000 `
    -w /app --mount type=bind,src="$(pwd)",target=/app `
    node:18-alpine `
    sh -c "yarn install && yarn run dev"

-dp 3000:3000 - same as before. Run in detached (background) mode and create a port mapping
-w /app - sets the “working directory” or the current directory that the command will run from
--mount type=bind,src="$(pwd)",target=/app - bind mount the current directory from the host into the /app directory in the container
node:18-alpine - the image to use. Note that this is the base image for our app from the Dockerfile
sh -c "yarn install && yarn run dev" - the command. We’re starting a shell using sh (alpine doesn’t have bash) and running yarn install to install packages and then running yarn run dev to start the development server. If we look in the package.json, we’ll see that the dev script starts nodemon.

docker logs -f <container id>
docker logs -f <container-id>
nodemon src/index.js
[nodemon] 2.0.20
[nodemon] to restart at any time, enter `rs`
[nodemon] watching dir(s): *.*
[nodemon] starting `node src/index.js`
Using sqlite database at /etc/todos/todo.db
Listening on port 3000

create a network
docker network create todo-app

docker run -d `
     --network todo-app --network-alias mysql `
     -v todo-mysql-data:/var/lib/mysql `
     -e MYSQL_ROOT_PASSWORD=secret `
     -e MYSQL_DATABASE=todos `
     mysql:8.0

connect to db and verify it connects
docker exec -it <mysql-container-id> mysql -u root -p

start a new container using the nicolaka/netshoot image. Make sure to connect it to same network
docker run -it --network todo-app nicolaka/netshoot
